package crypto

import (
	"testing"
)

func TestCryptGMSv12(t *testing.T) {
	recvIv := []byte{0x46, 0x72, 0x7A, 0xB7}
	recv := NewAESOFB(recvIv, 12, SetIvGenerator(FillIvZeroGenerator))

	input := []byte{0xD6, 0x4A, 0xC2, 0x27, 0xDB, 0xD7, 0x6B, 0xF4, 0xEF, 0x2D, 0xC3, 0x80, 0xB5, 0x68, 0x05, 0xDD, 0xB5, 0x24, 0xF2, 0xDF, 0xCB, 0x80, 0x58, 0xDE, 0x6C, 0x5C, 0xF4, 0x33, 0x5E, 0xBD, 0xE5, 0x52, 0xE1, 0xC0, 0x19, 0x35, 0xF0, 0x0C, 0x01, 0x3E, 0xB4}
	working := make([]byte, len(input))
	copy(working, input)

	if len(input) != 41 {
		t.Errorf("Wrong length")
	}

	recv.aesCrypt(working)

	expected := []byte{0xF7, 0x83, 0x4C, 0x9D, 0xD9, 0x93, 0xDA, 0x0C, 0x17, 0x8A, 0xF4, 0x07, 0x35, 0xD2, 0x27, 0x84, 0xBC, 0x7E, 0x66, 0xCC, 0x73, 0xEC, 0xCD, 0x4F, 0x77, 0x3A, 0x66, 0x24, 0x17, 0xFE, 0xED, 0x42, 0xC2, 0xF1, 0xFB, 0xAD, 0x4E, 0x01, 0xBB, 0xA1, 0xAD}

	var issue = false
	for i := 0; i < len(expected); i++ {
		if working[i] != expected[i] {
			t.Errorf("Wrong result")
			issue = true
		}
	}

	if issue {
		t.Log(working)
		t.Log(expected)
	}
}

func TestCryptGMSv83(t *testing.T) {
	recvIv := []byte{0xB, 0x60, 0x8B, 0xAE}
	recv := NewAESOFB(recvIv, 83)

	input := []byte{0x4A, 0x2B, 0x97, 0x53, 0x94, 0x36, 0xA1, 0xB4, 0x61, 0x3, 0xAB, 0x1, 0xA0, 0x49, 0x70, 0xA0, 0x62, 0x95, 0x28, 0x7A, 0x47, 0xD, 0x1E, 0x2E, 0xD7, 0xF4, 0x98, 0xFC, 0x37, 0x11, 0x94, 0xBF, 0x6C, 0x19, 0x80, 0x69, 0x33, 0xF5, 0xC4, 0x50, 0x5B, 0xED, 0x37, 0x95, 0xC3, 0xB6, 0x90, 0x29, 0x41}
	working := make([]byte, len(input))
	copy(working, input)

	if len(input) != 49 {
		t.Errorf("Wrong length")
	}

	recv.aesCrypt(working)

	expected := []byte{0x90, 0xB6, 0x9, 0xF8, 0x2B, 0xC1, 0x90, 0xC0, 0xDA, 0x21, 0x22, 0xA8, 0x27, 0xBE, 0x33, 0x20, 0x18, 0xE3, 0xFB, 0x7F, 0x51, 0x98, 0xAF, 0x42, 0x75, 0xBA, 0xED, 0x56, 0xD9, 0x57, 0x2D, 0xBC, 0x7B, 0x55, 0x7B, 0x4, 0x7B, 0xBC, 0xEE, 0xC3, 0x3A, 0x44, 0x5E, 0x1E, 0x2, 0x86, 0xF, 0xFD, 0xB1}

	for i := 0; i < len(expected); i++ {
		if working[i] != expected[i] {
			t.Errorf("Wrong result")
		}
	}

	t.Log(working)
}
